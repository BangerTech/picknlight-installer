[{"id":"faab0935295e6886","type":"tab","label":"Flow 2","disabled":false,"info":"","env":[]},{"id":"8be0fdc05723db83","type":"mysql","z":"faab0935295e6886","mydb":"fab43c717b4dbb79","name":"LED-Positions-Abfrage-PartDB","x":450,"y":480,"wires":[["ab1f5a2186fbaad7"]]},{"id":"dd1594c1e1606a59","type":"function","z":"faab0935295e6886","name":"SQL-Abfrage-Generator","func":"msg.topic = `\n    SELECT led_mapping.led_position, categories.name AS category_name\n    FROM led_mapping\n    INNER JOIN parts ON led_mapping.part_id = parts.id\n    INNER JOIN categories ON parts.id_category = categories.id\n    WHERE parts.id = ?;\n`;\nmsg.payload = [parseInt(msg.payload)];\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":390,"y":600,"wires":[["8be0fdc05723db83"]]},{"id":"1e76df10c6d0b8c9","type":"http in","z":"faab0935295e6886","name":"Inventar-ID-Empfänger","url":"inventoryid","method":"get","upload":false,"swaggerDoc":"","x":160,"y":840,"wires":[["56641cfe0d617a2e","84e651d0d13b9de8"]]},{"id":"56641cfe0d617a2e","type":"http response","z":"faab0935295e6886","name":"","statusCode":"200","headers":{},"x":340,"y":880,"wires":[]},{"id":"84e651d0d13b9de8","type":"function","z":"faab0935295e6886","name":"Inventar-ID-Extraktor","func":"msg.payload = msg.payload.getID;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":300,"y":720,"wires":[["dd1594c1e1606a59","8b287587e9bdcfa8"]]},{"id":"9d3c55df4483e2e4","type":"mqtt out","z":"faab0935295e6886","name":"WLED-Steuerungsbefehl-Sender","topic":"wled/partdb/api","qos":"","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"8255c095373b6a7c","x":1360,"y":500,"wires":[]},{"id":"ab1f5a2186fbaad7","type":"function","z":"faab0935295e6886","name":"LED-Positions-Extraktor","func":"function extract_led_data(msg) {\n    if (Array.isArray(msg.payload) && msg.payload.length > 0) {\n        const data = msg.payload[0];\n        if (typeof data === 'object') {\n            // Extrahiere LED-Position und Kategorie\n            const ledPosition = 'led_position' in data ? parseInt(data.led_position, 10) : null;\n            const categoryName = 'category_name' in data ? data.category_name : null;\n\n            return { ledPosition, categoryName };\n        }\n    }\n    return { ledPosition: null, categoryName: null };\n}\n\nconst extractedData = extract_led_data(msg);\nmsg.led_position = extractedData.ledPosition;\nmsg.category_name = extractedData.categoryName;\n\n// Debugging: Ausgabe der extrahierten Werte\nnode.warn(\"Extrahierte LED-Position: \" + msg.led_position);\nnode.warn(\"Extrahierter Kategoriename: \" + msg.category_name);\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":610,"y":340,"wires":[["0b99305fd846e889"]]},{"id":"8f9ce94b3bde8135","type":"function","z":"faab0935295e6886","name":"LED-Steuerung-Hauptlogik","func":"node.warn(\"Function 13 wurde aufgerufen\");\n\n// Extrahieren der LED-Streifenlänge, Fachbreite und Position\nlet ledStripLength = flow.get('ledStripLength') || 144; // Standardwert: 144\nlet ledSegmentWidth = flow.get('ledSegmentWidth') || 4.5; // Standardwert: 4.5\nlet ledPosition = msg.led_position;\n\n// Konvertieren zu Zahlen und Überprüfen auf NaN\nledStripLength = parseInt(ledStripLength, 10);\nledSegmentWidth = parseInt(ledSegmentWidth, 10);\nledPosition = parseInt(ledPosition, 10);\n\nif (isNaN(ledStripLength) || ledStripLength < 1) {\n    node.error(\"Ungültige LED-Streifenlänge: \" + ledStripLength);\n    return null;\n}\n\nif (isNaN(ledSegmentWidth) || ledSegmentWidth < 1) {\n    node.error(\"Ungültige LED-Fachbreite: \" + ledSegmentWidth);\n    return null;\n}\n\nif (isNaN(ledPosition) || ledPosition < 1) {\n    node.error(\"Ungültige LED-Position: \" + ledPosition);\n    return null;\n}\n\n// Berechnung des Fachs\nconst fach = Math.ceil(ledPosition / (ledSegmentWidth / 3));\n\n\nnode.warn(\"LED-Streifenlänge: \" + ledStripLength);\nnode.warn(\"LED-Fachbreite: \" + ledSegmentWidth);\nnode.warn(\"Empfangene LED-Position: \" + ledPosition);\nnode.warn(\"Berechnetes Fach: \" + fach);\n\n// Berechnung der Startposition und Endposition\nconst startIndex = (fach - 1) * ledSegmentWidth;\nconst endIndex = Math.min(startIndex + ledSegmentWidth, ledStripLength);\n\n// Zugriff auf gespeicherte Farben im Flow-Kontext\nconst categoryColors = flow.get('categoryColors') || {};\nconst categoryName = msg.category_name; // Kategorie aus der Nachricht\nconst categoryColor = categoryColors[categoryName] || \"#FFFFFF\"; // Standardfarbe Weiß\n\n// Erstellen des LED-Befehls mit der Farbe der Kategorie\nconst ledCommand = {\n    on: true,\n    seg: {\n        i: [startIndex, endIndex, categoryColor.replace(\"#\", \"\")] // HEX ohne \"#\"\n    }\n};\n\n// Setzen des MQTT-Payloads und Topics\nmsg.payload = JSON.stringify(ledCommand);\nmsg.topic = \"wled/partdb/api\";\n\n// Hinzufügen des berechneten Fachs zum msg-Objekt\nmsg.fach = fach;\n\nnode.warn(\"Erstellter LED-Befehl: \" + JSON.stringify(ledCommand));\n\n// Erstellen einer zweiten Nachricht zum Ausschalten nach 10 Sekunden\nconst offMsg = {\n    payload: JSON.stringify({ on: false }),\n    topic: \"wled/partdb/api\",\n    delay: 10000 // Verzögerung von 10 Sekunden\n};\n\n// Beide Nachrichten zurückgeben\nreturn [msg, offMsg];\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":840,"y":440,"wires":[["9d3c55df4483e2e4","6a686c8964e13452","c97607e5bc049397"],["d06880452754d9d1"]]},{"id":"d06880452754d9d1","type":"delay","z":"faab0935295e6886","name":"","pauseType":"delayv","timeout":"1","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":1080,"y":580,"wires":[["9d3c55df4483e2e4"]]},{"id":"44c575478f53f578","type":"function","z":"faab0935295e6886","name":"LED-Anzahl96-backup","func":"node.warn(\"Function 2 wurde aufgerufen\");\n\n// Extrahieren der LED-Position\nlet ledPosition = msg.led_position;\n\n// Konvertieren zu einer Zahl und Überprüfen auf NaN\nledPosition = parseInt(ledPosition, 10);\n\n// Definieren der LED-Positionen\nconst ledPositions = {\n    1: [0, 6], 2: [7, 13], 3: [14, 20], 4: [21, 27], 5: [28, 34], 6: [35, 41],\n    7: [42, 48], 8: [49, 55], 9: [56, 62], 10: [63, 69], 11: [70, 76], 12: [77, 83],\n    13: [84, 90], 14: [91, 96]\n};\n\nif (isNaN(ledPosition) || ledPosition < 1 || ledPosition > Object.keys(ledPositions).length) {\n    node.error(\"Ungültige LED-Position: \" + ledPosition);\n    return null; // Beenden der Funktion, wenn keine gültige Zahl oder außerhalb des Bereichs\n}\n\nnode.warn(\"Empfangene LED-Position: \" + ledPosition);\n\n// Abrufen der Start- und Endposition für die gegebene LED-Position\nconst [startIndex, endIndex] = ledPositions[ledPosition];\n\n// Erstellen des LED-Befehls\nconst ledCommand = {\n    \"on\": true,  // Einschalten des LED-Streifens\n    \"seg\": {\n        \"i\": [startIndex, endIndex, \"FF0000\"]\n    }\n};\n\n// Setzen des MQTT-Payloads und Topics\nmsg.payload = JSON.stringify(ledCommand);\nmsg.topic = \"wled/partdb/api\";\n\nnode.warn(\"Erstellter LED-Befehl: \" + JSON.stringify(ledCommand));\n\n// Erstellen einer zweiten Nachricht zum Ausschalten nach 10 Sekunden\nconst offMsg = {\n    payload: JSON.stringify({\"on\": false}),\n    topic: \"wled/partdb/api\",\n    delay: 10000  // 10 Sekunden Verzögerung\n};\n\n// Beide Nachrichten zurückgeben\nreturn [msg, offMsg];\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":220,"y":240,"wires":[[],[]]},{"id":"7f92707d5fd11d12","type":"change","z":"faab0935295e6886","name":"flow-context","rules":[{"t":"set","p":"ledStripLength","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":920,"wires":[["8f9ce94b3bde8135"]]},{"id":"4f3db5403f4c80fe","type":"function","z":"faab0935295e6886","name":"backup-funktionmitlängeneingabe","func":"node.warn(\"Function 2 wurde aufgerufen\");\n\n// Extrahieren der LED-Position\nlet ledPosition = flow.get('ledStripLength') || msg.payload;\n\n// Konvertieren zu einer Zahl und Überprüfen auf NaN\nledPosition = parseInt(ledPosition, 10);\n\nif (isNaN(ledPosition) || ledPosition < 1) {\n    node.error(\"Ungültige LED-Position: \" + ledPosition);\n    return null; // Beenden der Funktion, wenn keine gültige Zahl\n}\n\nnode.warn(\"Empfangene LED-Position: \" + ledPosition);\n\n// Berechnung der maximalen LED-Position\nconst maxLedPosition = Math.ceil(ledPosition / 7);\n\n// Berechnung der Startposition und Endposition\nconst startIndex = 0;\nconst endIndex = Math.min(7, ledPosition);\n\n// Erstellen des LED-Befehls\nconst ledCommand = {\n    \"on\": true, // Einschalten des LED-Streifens\n    \"seg\": {\n        \"i\": [startIndex, endIndex, \"FF0000\"]\n    }\n};\n\n// Setzen des MQTT-Payloads und Topics\nmsg.payload = JSON.stringify(ledCommand);\nmsg.topic = \"wled/partdb/api\";\n\nnode.warn(\"Erstellter LED-Befehl: \" + JSON.stringify(ledCommand));\n\n// Erstellen einer zweiten Nachricht zum Ausschalten nach 10 Sekunden\nconst offMsg = {\n    payload: JSON.stringify({\"on\": false}),\n    topic: \"wled/partdb/api\",\n    delay: 10000 // 10 Sekunden Verzögerung\n};\n\n// Beide Nachrichten zurückgeben\nreturn [msg, offMsg];\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":260,"y":200,"wires":[[],[]]},{"id":"366699036e3f06cb","type":"ui_text_input","z":"faab0935295e6886","name":"","label":"LED Fach Breite","tooltip":"","group":"e31fadebc996973b","order":15,"width":"0","height":"0","passthru":true,"mode":"number","delay":300,"topic":"ledSegmentWidth","sendOnBlur":true,"className":"","topicType":"str","x":640,"y":980,"wires":[["0a035f241a03fcc7"]]},{"id":"0a035f241a03fcc7","type":"change","z":"faab0935295e6886","name":"breite","rules":[{"t":"set","p":"ledSegmentWidth","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":810,"y":980,"wires":[["8f9ce94b3bde8135"]]},{"id":"70610644cc4d626f","type":"ui_slider","z":"faab0935295e6886","name":"","label":"LED Strip Length","tooltip":"","group":"e31fadebc996973b","order":17,"width":"6","height":"1","passthru":true,"outs":"end","topic":"ledStripLength","topicType":"str","min":0,"max":"243","step":1,"className":"","x":670,"y":860,"wires":[["7f92707d5fd11d12"]]},{"id":"cf24436e1462fe1e","type":"function","z":"faab0935295e6886","name":"funktion-eingabebreite&länge-backup","func":"node.warn(\"Function 2 wurde aufgerufen\");\n\n// Extrahieren der LED-Streifenlänge, Fachbreite und Position\nlet ledStripLength = flow.get('ledStripLength') || 96;\nlet ledSegmentWidth = flow.get('ledSegmentWidth') || 7;\nlet ledPosition = msg.led_position;\n\n// Überprüfen, ob die LED-Position vorhanden ist\nif (ledPosition === undefined || ledPosition === null || ledPosition === \"\") {\n    node.error(\"LED-Position ist nicht gesetzt\");\n    return null;\n}\n\n// Konvertieren zu Zahlen und Überprüfen auf NaN\nledStripLength = parseInt(ledStripLength, 10);\nledSegmentWidth = parseInt(ledSegmentWidth, 10);\nledPosition = parseInt(ledPosition, 10);\n\nif (isNaN(ledStripLength) || ledStripLength < 1) {\n    node.error(\"Ungültige LED-Streifenlänge: \" + ledStripLength);\n    return null;\n}\n\nif (isNaN(ledSegmentWidth) || ledSegmentWidth < 1) {\n    node.error(\"Ungültige LED-Fachbreite: \" + ledSegmentWidth);\n    return null;\n}\n\nif (isNaN(ledPosition) || ledPosition < 1) {\n    node.error(\"Ungültige LED-Position: \" + msg.led_position);  // Ausgabe des übergebenen Werts\n    return null;\n}\n\nnode.warn(\"LED-Streifenlänge: \" + ledStripLength);\nnode.warn(\"LED-Fachbreite: \" + ledSegmentWidth);\nnode.warn(\"Empfangene LED-Position: \" + ledPosition);\n\n// Berechnung der maximalen LED-Position\nconst maxLedPosition = Math.ceil(ledStripLength / ledSegmentWidth);\n\nif (ledPosition > maxLedPosition) {\n    node.error(\"LED-Position außerhalb des gültigen Bereichs\");\n    return null;\n}\n\n// Berechnung der Startposition und Endposition\nconst startIndex = (ledPosition - 1) * ledSegmentWidth;\nconst endIndex = Math.min(startIndex + ledSegmentWidth, ledStripLength);\n\n// Erstellen des LED-Befehls\nconst ledCommand = {\n    \"on\": true,\n    \"seg\": {\n        \"i\": [startIndex, endIndex, \"FF0000\"]\n    }\n};\n\n// Setzen des MQTT-Payloads und Topics\nmsg.payload = JSON.stringify(ledCommand);\nmsg.topic = \"wled/partdb/api\";\n\nnode.warn(\"Erstellter LED-Befehl: \" + JSON.stringify(ledCommand));\n\n// Erstellen einer zweiten Nachricht zum Ausschalten nach 10 Sekunden\nconst offMsg = {\n    payload: JSON.stringify({\"on\": false}),\n    topic: \"wled/partdb/api\",\n    delay: 10000\n};\n\n// Beide Nachrichten zurückgeben\nreturn [msg, offMsg];\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":270,"y":160,"wires":[[],[]]},{"id":"a01ef7ca107c9773","type":"function","z":"faab0935295e6886","name":"funktion-eingabebreite&länge&fachausgabe-backup","func":"node.warn(\"Function 13 wurde aufgerufen\");\n\n// Extrahieren der LED-Streifenlänge, Fachbreite und Position\nlet ledStripLength = flow.get('ledStripLength') || 96;\nlet ledSegmentWidth = flow.get('ledSegmentWidth') || 3;\nlet ledPosition = msg.led_position;\n\n// Konvertieren zu Zahlen und Überprüfen auf NaN\nledStripLength = parseInt(ledStripLength, 10);\nledSegmentWidth = parseInt(ledSegmentWidth, 10);\nledPosition = parseInt(ledPosition, 10);\n\nif (isNaN(ledStripLength) || ledStripLength < 1) {\n    node.error(\"Ungültige LED-Streifenlänge: \" + ledStripLength);\n    return null;\n}\n\nif (isNaN(ledSegmentWidth) || ledSegmentWidth < 1) {\n    node.error(\"Ungültige LED-Fachbreite: \" + ledSegmentWidth);\n    return null;\n}\n\nif (isNaN(ledPosition) || ledPosition < 1) {\n    node.error(\"Ungültige LED-Position: \" + ledPosition);\n    return null;\n}\n\n// Berechnung des Fachs\nconst fach = Math.ceil(ledPosition / (ledSegmentWidth / 3));\n\nnode.warn(\"LED-Streifenlänge: \" + ledStripLength);\nnode.warn(\"LED-Fachbreite: \" + ledSegmentWidth);\nnode.warn(\"Empfangene LED-Position: \" + ledPosition);\nnode.warn(\"Berechnetes Fach: \" + fach);\n\n// Berechnung der Startposition und Endposition\nconst startIndex = (fach - 1) * ledSegmentWidth;\nconst endIndex = Math.min(startIndex + ledSegmentWidth, ledStripLength);\n\n// Erstellen des LED-Befehls\nconst ledCommand = {\n    \"on\": true,\n    \"seg\": {\n        \"i\": [startIndex, endIndex, \"FF0000\"]\n    }\n};\n\n// Setzen des MQTT-Payloads und Topics\nmsg.payload = JSON.stringify(ledCommand);\nmsg.topic = \"wled/partdb/api\";\n\nnode.warn(\"Erstellter LED-Befehl: \" + JSON.stringify(ledCommand));\n\n// Erstellen einer zweiten Nachricht zum Ausschalten nach 10 Sekunden\nconst offMsg = {\n    payload: JSON.stringify({\"on\": false}),\n    topic: \"wled/partdb/api\",\n    delay: 10000\n};\n\n// Beide Nachrichten zurückgeben\nreturn [msg, offMsg];\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":320,"y":120,"wires":[[],[]]},{"id":"ec81d512225b2b03","type":"ui_text","z":"faab0935295e6886","group":"a6050c68613c3b35","order":2,"width":0,"height":0,"name":"","label":"Bauteil-ID","format":"{{msg.partId}}","layout":"row-spread","className":"","style":false,"font":"","fontSize":16,"color":"#000000","x":1200,"y":360,"wires":[]},{"id":"8b287587e9bdcfa8","type":"function","z":"faab0935295e6886","name":"Inventar-ID-Formatierer","func":"if (msg.payload) {\n    msg.payload = {\n        part_id: msg.payload,\n        led_position: null\n    };\n    msg.partId = msg.payload.part_id;\n    node.warn(\"Payload formatiert: \" + JSON.stringify(msg.payload));\n} else {\n    node.error(\"msg.payload ist leer oder ungültig.\");\n    return null;\n}\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":670,"y":720,"wires":[["ec81d512225b2b03","6a686c8964e13452"]]},{"id":"2b0012ee13effcf7","type":"http in","z":"faab0935295e6886","name":"Inventar-Name-Empfänger","url":"inventoryname","method":"get","upload":false,"swaggerDoc":"","x":170,"y":1200,"wires":[["24a578ce0f642049","5be14a2db8e693e5"]]},{"id":"24a578ce0f642049","type":"http response","z":"faab0935295e6886","name":"","statusCode":"200","headers":{},"x":500,"y":1300,"wires":[]},{"id":"5be14a2db8e693e5","type":"function","z":"faab0935295e6886","name":"Inventar-NAME-Extraktor","func":"msg.payload = msg.payload.getNAME || msg.payload;\ndelete msg.req;\ndelete msg.res;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":510,"y":1100,"wires":[["79f394d83ae55ebb"]]},{"id":"456f548414a3698d","type":"ui_text","z":"faab0935295e6886","group":"a6050c68613c3b35","order":1,"width":0,"height":0,"name":"","label":"Name","format":"{{msg.name}}","layout":"row-spread","className":"","style":false,"font":"","fontSize":16,"color":"#000000","x":1110,"y":1060,"wires":[]},{"id":"79f394d83ae55ebb","type":"function","z":"faab0935295e6886","name":"Inventar-NAME-Formatierer","func":"if (msg.payload) {\n    msg.name = msg.payload;\n    msg.payload = {\n        part_name: msg.payload,\n        led_position: null\n    };\n    node.warn(\"Payload formatiert: \" + JSON.stringify(msg.payload));\n} else {\n    node.error(\"msg.payload ist leer oder ungültig.\");\n    return null;\n}\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":820,"y":1160,"wires":[["456f548414a3698d","6a686c8964e13452"]]},{"id":"6a686c8964e13452","type":"function","z":"faab0935295e6886","name":"Daten-Sammler","func":"function collectData(msg) {\n    let data = flow.get('collectedData') || {};\n\n    if (msg.fach) data.aktuelles_fach = msg.fach;\n    if (msg.partId) data.bauteil_id = msg.partId;\n    if (msg.name) {\n        data.name = msg.name;\n        msg.name = msg.name; // Direkt für Dashboard verfügbar machen\n    }\n    if (msg.category_name) {\n        data.kategorie = msg.category_name;\n        msg.category_name = msg.category_name; // Direkt für Dashboard verfügbar machen\n    }\n\n    flow.set('collectedData', data);\n\n    return { payload: JSON.stringify(data), topic: \"inventory/update\", name: msg.name, category_name: msg.category_name };\n}\n\nreturn collectData(msg);\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1200,"y":820,"wires":[["0889bedd46e85e67","3049f6852ef0bcaa"]]},{"id":"0889bedd46e85e67","type":"mqtt out","z":"faab0935295e6886","name":"inventar-update-mqtt","topic":"inventory/update","qos":"","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"8255c095373b6a7c","x":1340,"y":920,"wires":[]},{"id":"21d87d2aba3bf073","type":"http in","z":"faab0935295e6886","name":"partinfo_receiver","url":"/partinfo","method":"get","upload":false,"swaggerDoc":"","x":400,"y":1540,"wires":[["88b02cba34f99e00"]]},{"id":"88b02cba34f99e00","type":"function","z":"faab0935295e6886","name":"partinfo_processor","func":"const lastProcessedTime = context.get('lastProcessedTime') || 0;\nconst currentTime = Date.now();\n\nif (currentTime - lastProcessedTime > 5000) {\n    context.set('lastProcessedTime', currentTime);\n    \n    const name = msg.payload.name || msg.req.query.name || 'Unbekannt';\n    const id = msg.payload.id || msg.req.query.id || 'Unbekannt';\n    \n    // Hole den aktuellen Wert aus dem Flow-Kontext\n    const collectedData = flow.get('collectedData') || {};\n    \n    // Debugging\n    node.warn(\"Gesammelte Daten aus Kontext: \" + JSON.stringify(collectedData));\n\n    const responseData = {\n        name: name,\n        id: id,\n        shelf: collectedData.aktuelles_fach || 'Unbekannt'\n    };\n\n    msg.payload = responseData;\n    node.warn(\"Verarbeitete Daten für Popup: \" + JSON.stringify(responseData));\n    return msg;\n} else {\n    node.warn(\"Nachricht ignoriert aufgrund der Verzögerungsperiode\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":750,"y":1580,"wires":[["29fb7cd72ab0d8d6"]]},{"id":"29fb7cd72ab0d8d6","type":"function","z":"faab0935295e6886","name":"Speech Formatter","func":"const name = msg.payload.name || 'Unbekannt';\nconst id = msg.payload.id || 'Unbekannt';\nconst shelf = msg.payload.shelf || 'Unbekannt';\n\nconst speechText = `Aktuelles Fach: ${shelf}, Bauteil-ID: ${id}, Name: ${name}`;\n\nmsg.payload = {\n    speechText: speechText\n};\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1050,"y":1620,"wires":[["b8ab3b0694b711c5"]]},{"id":"b8ab3b0694b711c5","type":"http response","z":"faab0935295e6886","name":"Speech Response","statusCode":"200","headers":{"content-type":"application/json"},"x":1330,"y":1720,"wires":[]},{"id":"3049f6852ef0bcaa","type":"ui_text","z":"faab0935295e6886","group":"a6050c68613c3b35","order":3,"width":0,"height":0,"name":"","label":"Kategorie","format":"{{msg.category_name}}","layout":"row-spread","className":"","style":false,"font":"","fontSize":16,"color":"#000000","x":1640,"y":820,"wires":[]},{"id":"2f26597b2162e55f","type":"function","z":"faab0935295e6886","name":"Farbgenerator","func":"function generateRandomColor() {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":360,"y":1800,"wires":[[]]},{"id":"0b99305fd846e889","type":"function","z":"faab0935295e6886","name":"Kategorie-Farb verwalter","func":"const categoryName = msg.category_name; // Kategorie aus der Nachricht\nif (!categoryName) {\n    node.error(\"Kategorie fehlt in der Nachricht.\");\n    return null;\n}\n\n// Zugriff auf gespeicherte Farben im Flow-Kontext\nlet categoryColors = flow.get('categoryColors') || {};\n\n// Prüfen, ob die Kategorie bereits eine Farbe hat\nif (!categoryColors[categoryName]) {\n    categoryColors[categoryName] = generateRandomColor();\n    node.warn(`Neue Farbe für Kategorie \"${categoryName}\": ${categoryColors[categoryName]}`);\n}\n\n// Farbe zur Nachricht hinzufügen\nmsg.category_color = categoryColors[categoryName];\n\n// Speichern der aktualisierten Farben im Flow-Kontext\nflow.set('categoryColors', categoryColors);\n\nreturn msg;\n\n// Funktion zum Generieren einer zufälligen Farbe\nfunction generateRandomColor() {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":930,"y":160,"wires":[["8f9ce94b3bde8135","4256cf309ceb9234","823ab3fe89fd1aa2"]]},{"id":"4256cf309ceb9234","type":"function","z":"faab0935295e6886","name":"Tabellen-Daten","func":"// Hole die gespeicherten Farben aus dem Flow-Kontext\nlet categoryColors = flow.get('categoryColors') || {};\n\n// Konvertiere die Farben in ein Array von Objekten für die Tabelle\nlet tableData = Object.keys(categoryColors).map(category => {\n    return { Kategorie: category, Farbe: categoryColors[category] };\n});\n\n// Setze die Daten als Payload\nmsg.payload = tableData;\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1300,"y":100,"wires":[["fb19f5a79c03c1d8"]]},{"id":"2f982f9909f76b60","type":"ui_dropdown","z":"faab0935295e6886","name":"","label":"Kategorie auswählen","tooltip":"","place":"Select option","group":"300f3736cc464aae","order":11,"width":0,"height":0,"passthru":true,"multiple":false,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"topic","topicType":"str","className":"","x":1220,"y":1920,"wires":[["0c7cb014e40bb536"]]},{"id":"823ab3fe89fd1aa2","type":"function","z":"faab0935295e6886","name":"function 1","func":"// Hole die gespeicherten Farben aus dem Flow-Kontext\nlet categoryColors = flow.get('categoryColors') || {};\n\n// Erstelle eine Liste von Kategorien für das Dropdown\nmsg.options = Object.keys(categoryColors);\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":800,"y":1960,"wires":[["2f982f9909f76b60"]]},{"id":"46375cb80e6e2901","type":"function","z":"faab0935295e6886","name":"function 2","func":"let category = flow.get('selectedCategory'); // Ausgewählte Kategorie\nlet newColor = msg.payload; // Neue Farbe aus dem Color Picker\n\nif (category && newColor) {\n    // Hole gespeicherte Farben\n    let categoryColors = flow.get('categoryColors') || {};\n    \n    // Aktualisiere die Farbe der Kategorie\n    categoryColors[category] = newColor;\n    flow.set('categoryColors', categoryColors);\n    \n    node.warn(`Farbe für Kategorie \"${category}\" aktualisiert: ${newColor}`);\n}\n\n// Optionale Rückgabe für Debugging oder weitere Verarbeitung\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1500,"y":2040,"wires":[["d4c14882ccf6ee13"]]},{"id":"097cc5ca6ebc8430","type":"debug","z":"faab0935295e6886","name":"debug 1","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1520,"y":1800,"wires":[]},{"id":"d4c14882ccf6ee13","type":"debug","z":"faab0935295e6886","name":"debug 2","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1800,"y":1800,"wires":[]},{"id":"0c7cb014e40bb536","type":"function","z":"faab0935295e6886","name":"function 3","func":"flow.set('selectedCategory', msg.payload);\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":980,"y":2120,"wires":[["9014292d355a9f6c"]]},{"id":"9014292d355a9f6c","type":"ui_iro-color-picker","z":"faab0935295e6886","group":"300f3736cc464aae","order":13,"width":0,"height":0,"name":"","label":"Kategorie Farbe","placement":"left","hAlign":"flex-start","vAlign":"flex-start","stateField":"payload","enableField":"enable","layoutDirection":"horizontal","widgetIndent":"3","buttonWidth":"2","pickerType":"widget","popupWidth":0,"popupHeight":0,"pickerSize":"100","backgroundDim":"50","backgroundColor":"#000000","backgroundVariable":false,"components":[{"options":{"borderColor":"#000000","borderWidth":0,"wheelLightness":true,"wheelAngle":0,"wheelDirection":"anticlockwise"},"componentId":"picker"}],"format":"hex","outFormat":"hexString","dynOutput":"input:end","outputConfirmed":false,"outputLimit":"10","passthru":false,"topic":"topic","topicType":"msg","iroColorValue":"#ff0000","x":1280,"y":2120,"wires":[["097cc5ca6ebc8430","46375cb80e6e2901"]]},{"id":"fb19f5a79c03c1d8","type":"ui_table","z":"faab0935295e6886","group":"a6050c68613c3b35","name":"Kategorie-Farben","order":9,"width":0,"height":0,"columns":[{"field":"Kategorie","title":"Kategorie","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"Farbe","title":"Farbe","width":"","align":"right","formatter":"color","formatterParams":{"target":"_blank"}},{"field":"Farbe","title":"Farbcode","width":"","align":"center","formatter":"plaintext","formatterParams":{"target":"_blank"}}],"outputs":0,"cts":false,"x":1530,"y":180,"wires":[]},{"id":"c97607e5bc049397","type":"ui_text","z":"faab0935295e6886","group":"a6050c68613c3b35","order":4,"width":0,"height":0,"name":"","label":"Aktuelles Fach","format":"{{msg.fach}}","layout":"row-spread","className":"","style":false,"font":"","fontSize":16,"color":"#000000","x":1200,"y":280,"wires":[]},{"id":"fab43c717b4dbb79","type":"MySQLdatabase","name":"partdb","host":"192.168.2.83","port":"3306","db":"partdb","tz":"","charset":"UTF8"},{"id":"8255c095373b6a7c","type":"mqtt-broker","name":"mqtt-openhabian","broker":"192.168.2.193","port":"1883","clientid":"","autoConnect":true,"usetls":false,"protocolVersion":"4","keepalive":"60","cleansession":true,"autoUnsubscribe":true,"birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closeRetain":"false","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","willMsg":{},"userProps":"","sessionExpiry":""},{"id":"e31fadebc996973b","type":"ui_group","name":"LED Settings","tab":"a79d5e5687dcaec6","order":1,"disp":true,"width":"6","collapse":false,"className":""},{"id":"a6050c68613c3b35","type":"ui_group","name":"Part Info","tab":"81ce290e07754066","order":1,"disp":true,"width":"6","collapse":false,"className":""},{"id":"300f3736cc464aae","type":"ui_group","name":"Category Settings","tab":"1f86bf9ab75d72db","order":1,"disp":true,"width":"6","collapse":false,"className":""},{"id":"a79d5e5687dcaec6","type":"ui_tab","name":"LED Settings","icon":"highlight","order":2,"disabled":false,"hidden":false},{"id":"81ce290e07754066","type":"ui_tab","name":"Part Info","icon":"info","order":1,"disabled":false,"hidden":false},{"id":"1f86bf9ab75d72db","type":"ui_tab","name":"Category Settings","icon":"format_color_fill","order":3,"disabled":false,"hidden":false}]